<!--
This file was generated by Spark. Do not edit it by hand.
-->
# DSL: Ash.Reactor

`Ash.Reactor` is a [`Reactor`](https://hex.pm/packages/reactor) extension
which provides steps for working with Ash resources and actions.


## ash
Ash-related configuration for the `Ash.Reactor` extension






### Options

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Default</th>
      <th colspan=2>Docs</th>
    </tr>
  </thead>
  <tbody>
    <tr>
  <td style="text-align: left">
    <a id="ash-default_api" href="#ash-default_api">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        default_api
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">module</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    An API to use by default when calling actions
  </td>
</tr>

  </tbody>
</table>





## reactor.create
```elixir
create name, resource, action \ nil
```


Declares a step that will call a create action on a resource.

### Nested DSLs
 * [actor](#reactor-create-actor)
 * [inputs](#reactor-create-inputs)
 * [tenant](#reactor-create-tenant)
 * [wait_for](#reactor-create-wait_for)


### Examples
```
create :create_post, MyApp.Post, :create do
  inputs %{
    title: input(:post_title),
    author_id: result(:get_user, [:id])
  }
  actor result(:get_user)
  tenant result(:get_organisation, [:id])
end

```




### Options

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Default</th>
      <th colspan=2>Docs</th>
    </tr>
  </thead>
  <tbody>
    <tr>
  <td style="text-align: left">
    <a id="name-resource-action-name" href="#name-resource-action-name">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        name
      </span>
    </a>
      <sup style="color: red">*</sup>

  </td>
  <td style="text-align: left">
    <code class="inline">atom</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    A unique name for the step.

This is used when choosing the return value of the Reactor and for
arguments into other steps.

  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="name-resource-action-resource" href="#name-resource-action-resource">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        resource
      </span>
    </a>
      <sup style="color: red">*</sup>

  </td>
  <td style="text-align: left">
    <code class="inline">module</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    The resource to call the action on.

  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="name-resource-action-action" href="#name-resource-action-action">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        action
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">atom</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    The name of the action to call on the resource.

  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="name-resource-action-api" href="#name-resource-action-api">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        api
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">module</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    The API to use when calling the action.  Defaults to the API set in the `ash` section.
  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="name-resource-action-async?" href="#name-resource-action-async?">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        async?
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">boolean</code>
  </td>
  <td style="text-align: left">
    <code class="inline">true</code>
  </td>
  <td style="text-align: left" colspan=2>
    When set to true the step will be executed asynchronously via Reactor's `TaskSupervisor`.
  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="name-resource-action-authorize?" href="#name-resource-action-authorize?">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        authorize?
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">boolean | nil</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    Explicitly enable or disable authorization for the action.
  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="name-resource-action-description" href="#name-resource-action-description">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        description
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">String.t</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    A description for the step
  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="name-resource-action-upsert_identity" href="#name-resource-action-upsert_identity">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        upsert_identity
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">atom</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    The identity to use for the upsert
  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="name-resource-action-upsert?" href="#name-resource-action-upsert?">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        upsert?
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">boolean</code>
  </td>
  <td style="text-align: left">
    <code class="inline">false</code>
  </td>
  <td style="text-align: left" colspan=2>
    Whether or not this action should be executed as an upsert.
  </td>
</tr>

  </tbody>
</table>


## reactor.create.actor
```elixir
actor source
```


Specifies the action actor






### Options

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Default</th>
      <th colspan=2>Docs</th>
    </tr>
  </thead>
  <tbody>
    <tr>
  <td style="text-align: left">
    <a id="source-source" href="#source-source">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        source
      </span>
    </a>
      <sup style="color: red">*</sup>

  </td>
  <td style="text-align: left">
    <code class="inline">Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    What to use as the source of the actor.

See `Reactor.Dsl.Argument` for more information.

  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="source-transform" href="#source-transform">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        transform
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">(any -> any) | module | nil</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    An optional transformation function which can be used to modify the
actor before it is passed to the action.

  </td>
</tr>

  </tbody>
</table>





### Introspection

Target: `Ash.Reactor.Dsl.Actor`

## reactor.create.inputs
```elixir
inputs template
```


Specify the inputs for an action



### Examples
```
inputs %{
  author: result(:get_user),
  title: input(:title),
  body: input(:body)
}

```

```
inputs(author: result(:get_user))

```




### Options

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Default</th>
      <th colspan=2>Docs</th>
    </tr>
  </thead>
  <tbody>
    <tr>
  <td style="text-align: left">
    <a id="template-template" href="#template-template">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        template
      </span>
    </a>
      <sup style="color: red">*</sup>

  </td>
  <td style="text-align: left">
    <code class="inline">%{optional(atom) => Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value} | Keyword.t(Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value)</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    
  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="template-transform" href="#template-transform">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        transform
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">(any -> any) | module | nil</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    An optional transformation function which will transform the inputs
before executing the action.

  </td>
</tr>

  </tbody>
</table>





### Introspection

Target: `Ash.Reactor.Dsl.Inputs`

## reactor.create.tenant
```elixir
tenant source
```


Specifies the action tenant






### Options

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Default</th>
      <th colspan=2>Docs</th>
    </tr>
  </thead>
  <tbody>
    <tr>
  <td style="text-align: left">
    <a id="source-source" href="#source-source">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        source
      </span>
    </a>
      <sup style="color: red">*</sup>

  </td>
  <td style="text-align: left">
    <code class="inline">Reactor.Template.Input | Reactor.Template.Result | Reactor.Template.Value</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    What to use as the source of the tenant.

See `Reactor.Dsl.Argument` for more information.

  </td>
</tr>

<tr>
  <td style="text-align: left">
    <a id="source-transform" href="#source-transform">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        transform
      </span>
    </a>
      
  </td>
  <td style="text-align: left">
    <code class="inline">(any -> any) | module | nil</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    An optional transformation function which can be used to modify the
tenant before it is passed to the action.

  </td>
</tr>

  </tbody>
</table>





### Introspection

Target: `Ash.Reactor.Dsl.Tenant`

## reactor.create.wait_for
```elixir
wait_for names
```


Wait for the named step to complete before allowing this one to start.

Desugars to `argument :_, result(step_to_wait_for)`




### Examples
```
wait_for :create_user
```




### Options

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Default</th>
      <th colspan=2>Docs</th>
    </tr>
  </thead>
  <tbody>
    <tr>
  <td style="text-align: left">
    <a id="names-names" href="#names-names">
      <span style="font-family: Inconsolata, Menlo, Courier, monospace;">
        names
      </span>
    </a>
      <sup style="color: red">*</sup>

  </td>
  <td style="text-align: left">
    <code class="inline">list(atom) | atom</code>
  </td>
  <td style="text-align: left">
    
  </td>
  <td style="text-align: left" colspan=2>
    The name of the step to wait for.

  </td>
</tr>

  </tbody>
</table>





### Introspection

Target: `Reactor.Dsl.WaitFor`




### Introspection

Target: `Ash.Reactor.Dsl.Create`


